#!/usr/bin/env python3

import sys
from math import *

import rospy
import tf2_ros
import actionlib

from actionlib_msgs.msg import GoalStatus

from geometry_msgs.msg import Point, PoseStamped, TransformStamped

from nav_msgs.msg import Path

from spar_msgs.msg import FlightMotionAction, FlightMotionGoal

from std_msgs.msg import Float32MultiArray, String
# Libraries for interfacing with BreadCrumb
from breadcrumb.srv import RequestPath
from breadcrumb.srv import RequestPathRequest
import subprocess


# This is getting a bit more complicated now, so we'll put our information in
# a class to keep track of all of our variables. This is not so much different
# to the previous methods, other than the fact that the class will operate
# within itself.
# i.e. it will have it's own publishers, subscribers, etc., that
# will call it's own functions as callbacks, etc.
class Guidance():
	def __init__(self, waypoints):
		# Make sure we have a valid waypoint list
		# Safe boundary values, default to X<2,Y<2,Z<2.
		self.safeRangeX = rospy.get_param("~safeRangeX", 2)
		self.safeRangeY = rospy.get_param("~safeRangeY", 2)
		self.safeRangeZ = rospy.get_param("~safeRangeZ", 2) 
		self.paymode = 0

		if not self.check_waypoints(waypoints):
			raise ValueError("Invalid waypoint list input!")

		# Internal counter to see what waypoint were are up to
		self.nextWaypointIndex = 0

		# Set a flag to indicate that we are doing a specific inspection
		# and that we are not following our waypoint list
		# This will stop our "waypoint is reached" callback from firing
		# during the roi diversion and taking over our flight!
		self.performing_roi = False
		# Low battery flag
		self.low_battery = False

		# Save the input waypoints
		self.waypoints = waypoints
		# Display the full path
		self.display_path(waypoints,"/guidance/fullPath")

		# Make some space to record down our current location
		self.current_location = Point()
		# Set our linear and rotational velocities for the flight
		self.vel_linear = rospy.get_param("~vel_linear", 0.2)
		self.vel_yaw = rospy.get_param("~vel_yaw", 0.2)
		# Set our position and yaw waypoint accuracies
		self.accuracy_pos = rospy.get_param("~acc_pos", 0.3)
		self.accuracy_yaw = rospy.get_param("~acc_yaw", 2.0)
		# Get survey altitude
		self.surveyAltitude = rospy.get_param("~surveyAlt", 1.5)

		# Create our action client
		action_ns = rospy.get_param("~action_topic", 'spar/flight')
		self.spar_client = actionlib.SimpleActionClient(action_ns, FlightMotionAction)
		rospy.loginfo("Waiting for spar...")
		self.spar_client.wait_for_server()


		# Set up the publisher/subscriber and global for the payload
		self.pay_item = "None"
		self.pay_pub = rospy.Publisher('/payload_deployment', String, queue_size=10)
		self.pay_sub = rospy.Subscriber('/roi_detection', Float32MultiArray, self.roi_callback)

		# Speaker Options
		self.speak = rospy.Publisher('/speak', String, queue_size=10)
		# Set up subscriber for the low battery procedure
		self.battery_warning_sub = rospy.Subscriber('/battery_warning', String, self.warning_callback)

		# Wait to connect with Breadcrumb (Warning, you code might get stuck in here if breadcrumb is not running)
		# Code will error if you try to connect to a service
		# that does not exist
		rospy.wait_for_service('/breadcrumb/request_path')
		self.srvc_bc = rospy.ServiceProxy('/breadcrumb/request_path', RequestPath)
		rospy.loginfo("Breadcrumb Loaded")

		if not rospy.is_shutdown():
			# Good to go, start mission
			rospy.loginfo("Starting waypoint mission")
			message = "Flying to ArUco Landing location"
			self.speak.publish(message)


			# Setup first waypoint segment
			# XXX:	Another option would be to do "takeoff" and leave "nextWaypointIndex = 0" to
			#		begin the mission at the first waypoint after take-off
			rospy.loginfo("Doing first waypoint / maybe takeoff")
			self.send_wp(self.waypoints[0])
			self.nextWaypointIndex += 1
			# Initialisation breadcrumb waypoints
			self.breadcrumbWPSnextIndex = 0
			self.breadcrumbMode = False
			self.breadcrumbWPS = []

			# Setup a timer to check if our waypoint has completed at 20Hz
			rospy.loginfo("Setting callbacks")
			self.timer = rospy.Timer( rospy.Duration(1.0/20.0), self.check_waypoint_status )
			# Callback to save "current location" such that we can perform and return
			# from a diversion to the correct location
			# XXX: These topics could be hard-coded to avoid using a launch file
			self.sub_pose = rospy.Subscriber("~pose", PoseStamped, self.callback_pose)
			# Subscriber to catch "ROI" diversion commands
			self.sub_roi = rospy.Subscriber("~roi", PoseStamped, self.callback_inspect_roi)

			# XXX: Could have a publisher to output our waypoint progress
			# throughout the flight (should publish each time the waypoint
			# counter is increased). Note: will also need to import "Float32"
			# from "std_msgs.msg" in the header
			# self.pub_progress = rospy.Subscriber("~waypoint_progress", Float32, 10)

			# If shutdown is issued (eg. CTRL+C), cancel current
	 		# mission before rospy is shutdown.
			rospy.loginfo("Running callbacks while not shutdown...")
			rospy.on_shutdown( lambda : self.shutdown() )

	# This function will check if a list of waypoints is in the format we expect
	def check_waypoints(self, wps):
		# Make sure waypoints are a list
		if not isinstance(wps, list):
			rospy.logwarn("Waypoints are not list")
			return False

		# Make sure we have at least one waypoint
		if len(wps) < 1:
			rospy.logwarn("Waypoints list is empty")
			return False

		# Check each of our waypoints
		for i in range(len(wps)):
			if not self.check_waypoint(wps[i]):
				rospy.logwarn("Waypoint %i did not pass check" % (i + 1))
				return False

		# If we haven't returned false yet, then waypoints look good!
		return True
	
	def roi_callback(self, data):
		# The first element in the data array is the ROI ID or number
		roi_id = int(data.data[0]*10)

		if roi_id == 1:
			self.pay_item = "Backpack"
		elif roi_id == 2:
			self.pay_item = "Human"
		elif roi_id == 3:
			self.pay_item = "Drone"
		elif roi_id == 4:
			self.pay_item = "Phone"
		else:
			self.pay_item = "Unknown"
			
		rospy.loginfo(f"New ROI ID detected: {self.pay_item}")

	# This function will check if a waypoint is in the format we expect
	def check_waypoint(self, wp):
		# Make sure each waypoint is a list
		if not isinstance(wp, list):
			rospy.logwarn("Waypoint is not a list of coordinates")
			return False

		# Make sure each waypoint has 4 values
		if len(wp) != 4:
			rospy.logwarn("Waypoint has an invalid length (must be X/Y/Z/Yaw)")
			return False

		# Check if the waypoint is inside the net for X, Y and Z:
		if abs(wp[0]) > self.safeRangeX or abs(wp[1]) > self.safeRangeY or wp[2] > self.safeRangeZ:
			rospy.logwarn("Waypoint has an invalid size for O134 (must be -{}<X<{}/-{}<Y<{}/Z<{}/Yaw)".format(self.safeRangeX,self.safeRangeX,self.safeRangeY,self.safeRangeY,self.safeRangeZ))
			return False

		# If we haven't returned false yet, then waypoint looks valid!
		return True


	# This function will make sure we shut down the node as safely as possible
	def shutdown(self):
		# Unregister anything that needs it here
		rospy.loginfo("Unregistering topics and shuting down...")
		self.sub_pose.unregister()
		self.sub_roi.unregister()
		self.spar_client.cancel_goal()

		rospy.loginfo("Guidance stopped")


	# This function will check receive the current pose of the UAV constantly
	def callback_pose(self, msg_in):
		#rospy.loginfo("Got pose")
		# Store the current position at all times so it can be accessed later
		# rospy.loginfo("Updating Pose UAV...")
		self.current_location = msg_in.pose.position

	def warning_callback(self, msg):
		self.low_battery = True
		rospy.loginfo(f"Received warning: {msg.data}")
		self.spar_client.cancel_goal()
		

	# This function will fire whenever a ROI pose message is sent
	# It is also responsible for handling the ROI "inspection task"
	def callback_inspect_roi(self, msg_in):
		# Set our flag that we are performing the diversion
		self.performing_roi = True
		message = "Starting diversion"
		self.speak.publish(message)

		rospy.loginfo("Starting diversion to ROI...")
		# Cancel the current goal (if there is one)
		self.spar_client.cancel_goal()
		# Record our current location so we can return to it later
		start_location = self.current_location
		# XXX:	It would also be a good idea to capture "current yaw" from
		#		the pose to maintain that throughout a diversion

		# Set the "diversion waypoint" (at yaw zero)
		# dwp = [msg_in.pose.position.x, msg_in.pose.position.y, msg_in.pose.position.z, 0.0]
		dwp = [msg_in.pose.position.x, msg_in.pose.position.y, 0.5, 0.0]
		# Set the "return waypoint" (at yaw zero)
		rwp = [start_location.x, start_location.y, start_location.z, 0.0]
		rospy.loginfo(f"RWP: {rwp}")

		# Publish the diversion path
		roiWPS = []
		roiWPS.append(rwp)
		roiWPS.append(dwp)
		self.display_path(roiWPS,"/guidance/diversionROI")

		# XXX: Could pause here for a moment with ( "rospy.sleep(...)" ) to make sure the UAV stops correctly

		self.send_wp(dwp)
		self.spar_client.wait_for_result()
		if self.spar_client.get_state() != GoalStatus.SUCCEEDED:
			# Something went wrong, cancel out of guidance!
			rospy.signal_shutdown("cancelled")
			return

		rospy.loginfo("Reached diversion ROI!")
		message = f"Dropping Payload: {self.pay_item}"
		self.speak.publish(message)
		# XXX: Do something?
		msg = String()
		if self.pay_item == "Backpack":
			msg.data = "drop_gps"
		elif self.pay_item == "Human":
			msg.data = "drop_epipen"
		elif self.pay_item == "Drone":
			msg.data = "drop_drone"
		elif self.pay_item == "Phone":
			msg.data = "drop_phone"
		else:
			msg.data = "Unknown"
        # Publish the message
		rospy.loginfo(f"Publishing message: {msg.data}")
		self.pay_pub.publish(msg)
		rospy.sleep(rospy.Duration(10))

		rospy.loginfo("Returning to flight plan...")
		message = "Returning to Flight Path"
		self.speak.publish(message)
		rospy.loginfo(f"RWP: {rwp}")
		self.send_wp(rwp)
		self.spar_client.wait_for_result()
		if self.spar_client.get_state() != GoalStatus.SUCCEEDED:
			# Something went wrong, cancel out of guidance!
			rospy.signal_shutdown("cancelled")
			return

		# "nextWaypointIndex" represents the "next waypoint"
		# "nextWaypointIndex - 1" represents the "current waypoint"
		rospy.loginfo("Resuming flight plan from waypoint %i!" % (self.nextWaypointIndex))
		self.send_wp(self.waypoints[self.nextWaypointIndex])
		# MADE A CHANGE HERE TO REMOVE THE -1 TO CONTINUE TO NEXT POINT RATHER THAN RETURNING FOR BREADCRUMB MODE
		# Unset our flag that we are performing a diversion
		# to allow the waypoint timer to take back over
		self.performing_roi = False


	# This function is for convinience to simply send out a new waypoint
	def send_wp(self, wp):
		# Make sure the waypoint is valid before continuing
		if not self.check_waypoint(wp):
			rospy.logwarn("Invalid waypoint, skipped...")
			return False
			# raise ArgumentError("Invalid waypoint input!")

		# Build the flight goal
		goal = FlightMotionGoal()
		goal.motion = FlightMotionGoal.MOTION_GOTO
		goal.position.x = wp[0]
		goal.position.y = wp[1]
		goal.position.z = wp[2]
		#goal.yaw = wp[3]
		goal.velocity_vertical = self.vel_linear
		goal.velocity_horizontal = self.vel_linear
		goal.yawrate = self.vel_yaw
		goal.wait_for_convergence = True
		goal.position_radius = self.accuracy_pos
		goal.yaw_range = self.accuracy_yaw

		# For this function, we don't wait in the loop.
		# Instead we just send the waypoint and check up on it later
		# This checking is either with the "self.timer" for waypoints
		# or with direct calls during the ROI diversion
		self.spar_client.send_goal(goal)
		 # If shutdown is issued, cancel current mission before rospy is shutdown
		rospy.on_shutdown(lambda : self.spar_client.cancel_goal())

	def land(self):
		# Build the flight goal
		goal = FlightMotionGoal()
		goal.motion = FlightMotionGoal.MOTION_LAND
		goal.velocity_vertical = self.vel_linear
		goal.velocity_horizontal = self.vel_linear
		goal.yawrate = self.vel_yaw
		goal.wait_for_convergence = True
		goal.position_radius = self.accuracy_pos
		goal.yaw_range = self.accuracy_yaw

		# For this function, we don't wait in the loop.
		# Instead we just send the waypoint and check up on it later
		# This checking is either with the "self.timer" for waypoints
		# or with direct calls during the ROI diversion
		self.spar_client.send_goal(goal)
		# If shutdown is issued, cancel current mission before rospy is shutdown
		rospy.on_shutdown(lambda : self.spar_client.cancel_goal())

	# This function will fire whenever we recieve a timer event (te) from rospy.Timer()
	# The main purpose is to check if a waypoint has been reached,
	# and if so, send out the next waypoint to continue the mission
	def check_waypoint_status(self, te):
		# If we're performing the ROI diversion, then don't do
		# anything here, as this is handled in that function
		#rospy.loginfo("Checking WP Progress")
		if self.low_battery == True:
			self.nextWaypointIndex = (len(self.waypoints))
		if not self.performing_roi:
			#rospy.loginfo("NOT ROI")
			# If the last segment has succeeded.
			# For more complex tasks, it might be necessary to also
			# check if you are in waypoint or breadcrum mode.
			# Hint: really, we should check for other status states
			#		(such as aborted), as there are some states
			#		where we won't recover from, and should just exit
			if self.spar_client.get_state() == GoalStatus.SUCCEEDED:
				rospy.loginfo("Reached waypoint %i!" % (self.nextWaypointIndex))

				# XXX:	Another check could go here to finish the mission early
				#		if "all" inspection tasks have been completed
				#		(Add in another "if" and make the waypoint counter check
				#		 an "elif" check instead.
				#		 i.e. if complete; elif more wps; else wps finished)
				if self.nextWaypointIndex < (len(self.waypoints)):

					if not self.breadcrumbMode:
						# Set up a path request for breadcrumb
						req = RequestPathRequest()
						req.start.x = self.waypoints[self.nextWaypointIndex-1][0] # Get X
						req.start.y = self.waypoints[self.nextWaypointIndex-1][1] # Get Y
						req.start.z = self.waypoints[self.nextWaypointIndex-1][2] # Get Z
						req.end.x = self.waypoints[self.nextWaypointIndex][0]	# Get next X
						req.end.y = self.waypoints[self.nextWaypointIndex][1]	# Get next Y
						req.end.z = self.waypoints[self.nextWaypointIndex][2]	# Get next Z

						res = self.srvc_bc(req)
						
						# Breadcrumb will return a vector of poses if a solution was found
						# If no solution was found (i.e. no solution, or request bad
						# start/end), then breadcrumb returns and empty vector
						# XXX: You could also use res.path_sparse (see breadcrumb docs)
						breadcrumbWPS = []
						if len(res.path.poses) > 0:
							# Print the path to the screen
							rospy.loginfo("Segment {}-1 to {}:".format(self.nextWaypointIndex,self.nextWaypointIndex))
							rospy.loginfo("[%0.2f;%0.2f;%0.2f] => [%0.2f;%0.2f;%0.2f]",
										req.start.x,req.start.y,req.start.z,
										req.end.x,req.end.y,req.end.z)

							# Loop through the solution returned from breadcrumb
							for i in range(len(res.path.poses)):
								rospy.loginfo("    [%0.2f;%0.2f;%0.2f]",
											res.path.poses[i].position.x,
											res.path.poses[i].position.y,
											res.path.poses[i].position.z)
								breadcrumbWPS.append([res.path.poses[i].position.x, res.path.poses[i].position.y, res.path.poses[i].position.z, 0.0])

							# Display the path
							# print(breadcrumbWPS)
							self.breadcrumbWPS = breadcrumbWPS
							self.display_path(breadcrumbWPS,"/guidance/pathBreadcrumb")
							self.breadcrumbMode = True
							self.breadcrumbWPSnextIndex = 0
							self.send_wp(self.breadcrumbWPS[self.breadcrumbWPSnextIndex])
							self.breadcrumbWPSnextIndex +=1 

						else:
							rospy.logerr("solution not found")

					else:
						rospy.loginfo("Executing Bread Path")
						if self.breadcrumbWPSnextIndex < (len(self.breadcrumbWPS)):
							# We got here a breadcrumb path, we should exuted down here:
							self.send_wp(self.breadcrumbWPS[self.breadcrumbWPSnextIndex])
							# Increment our waypoint counter
							self.breadcrumbWPSnextIndex +=1
						else:
							# If we finish with the breadcrumb waypoints we increase normal waypoints
							self.nextWaypointIndex += 1
							self.breadcrumbMode = False
				elif self.nextWaypointIndex == (len(self.waypoints)):
					# Else the mission is over, shutdown and quit the node
					# XXX:	This could be used to restart the mission back to the
					#		first waypoint instead to restart the mission
					
					# aruco_transforms = self.get_existing_aruco_transforms()
					ArUcoID = 1
					transform_data = self.get_aruco_transform(ArUcoID)
					if transform_data is not None:
						ArUcoX = transform_data['x']
						ArUcoY = transform_data['y']
						ArUcoZ = transform_data['z']

						ArUcoWP = [ArUcoX, ArUcoY, 0.2, 0.0]
						self.send_wp(ArUcoWP)
					# if aruco_transforms:
					# 	# Get the first ArUco marker (the key-value pair) in the dictionary
					# 	first_aruco_id, first_aruco_transform = next(iter(aruco_transforms.items()))

					# 	# Extract the x, y, z coordinates
					# 	arucoWP = [first_aruco_transform['x'], first_aruco_transform['y'], self.surveyAltitude, 0]
					# 	# Print or use the coordinates
					# 	rospy.loginfo(f"First ArUco ID: {first_aruco_id}")
					# 	self.send_wp(arucoWP)
						# Extract the x, y, z coordinates
						# arucoWP = [first_aruco_transform['x'], first_aruco_transform['y'], 0.5, 0]
						# # Print or use the coordinates
						# rospy.loginfo(f"First ArUco ID: {first_aruco_id}")
						# message = "Flying to ArUco Landing location"
						# self.speak.publish(message)
						# self.send_wp(arucoWP)
					else:
						rospy.loginfo("No ArUco markers found.")
					self.nextWaypointIndex += 1
				else:
					self.land()
					rospy.sleep(rospy.Duration(10))
					message = "Misison Complete"
					self.speak.publish(message)
					rospy.loginfo("Mission complete!")
					rospy.signal_shutdown("Complete, Wooh!")
			elif (self.spar_client.get_state() == GoalStatus.PREEMPTED) or (self.spar_client.get_state() == GoalStatus.ABORTED) or (self.spar_client.get_state() == GoalStatus.REJECTED):
				rospy.loginfo("Mission cancelled!")
				rospy.signal_shutdown("cancelled")

	# Display a path
	def display_path(self, wps, name):
		rospy.loginfo("Displaying path...")
		pub_path = rospy.Publisher(name, Path, queue_size=10, latch=True)
		msg = Path()
		msg.header.frame_id = "/map"
		msg.header.stamp = rospy.Time.now()
	
		for wp in wps:
			pose = PoseStamped()
			pose.pose.position.x = wp[0]
			pose.pose.position.y = wp[1]
			pose.pose.position.z = wp[2]
	
			pose.pose.orientation.w = 1.0
			pose.pose.orientation.x = 0.0
			pose.pose.orientation.y = 0.0
			pose.pose.orientation.z = 0.0
	
			msg.poses.append(pose)
		rospy.loginfo("Publishing path...")
		pub_path.publish(msg)

	def get_aruco_transform(self, aruco_id):
		# Lookup the transform from "map" to the specific ArUco frame
			aruco_frame = f"ArUco_{aruco_id}"
			transform = tf_buffer.lookup_transform("map", aruco_frame, rospy.Time(0), rospy.Duration(2.0))

			# Extract the translation (position) and rotation (orientation)
			translation = transform.transform.translation
			rotation = transform.transform.rotation

			# Log the retrieved information
			rospy.loginfo(f"ArUco_{aruco_id} Transform: Translation (x: {translation.x}, y: {translation.y}, z: {translation.z}), "
						f"Rotation (qx: {rotation.x}, qy: {rotation.y}, qz: {rotation.z}, qw: {rotation.w})")

			return {
				'x': translation.x,
				'y': translation.y,
				'z': translation.z,
				'qx': rotation.x,
				'qy': rotation.y,
				'qz': rotation.z,
				'qw': rotation.w
			}

	# def get_existing_aruco_transforms(self):
	# 	# Create a tf2 buffer and listener
	# 	tf_buffer = tf2_ros.Buffer()
	# 	listener = tf2_ros.TransformListener(tf_buffer)

	# 	# Allow some time for the listener to fill with transforms
	# 	rospy.sleep(2)  # Adjust this if needed to allow buffering time

	# 	marker_transforms = {}

	# 	try:
	# 		# Get all available transforms from the buffer
	# 		frames = tf_buffer.all_frames_as_string()
	# 		rospy.loginfo(frames)

	# 		# Extract just the frame names from the detailed string output
	# 		lines = frames.splitlines()
	# 		aruco_frames = []

	# 		for line in lines:
	# 			if "ArUco_" in line:
	# 				# Extract the frame name by splitting the line
	# 				frame = line.split()[1]  # "Frame ArUco_54" -> "ArUco_54"
	# 				aruco_frames.append(frame)

	# 		rospy.loginfo(aruco_frames)

	# 		for aruco_frame in aruco_frames:
	# 			aruco_id = aruco_frame.split('_')[1]  # Extract the ArUco ID

	# 			# Lookup the transform from "map" to the ArUco frame
	# 			transform = tf_buffer.lookup_transform("map", aruco_frame, rospy.Time(0), rospy.Duration(2.0))

	# 			# Extract the translation (position) and rotation (orientation)
	# 			translation = transform.transform.translation
	# 			rotation = transform.transform.rotation

	# 			# Log the retrieved information
	# 			rospy.loginfo(f"{aruco_frame} Transform: Translation (x: {translation.x}, y: {translation.y}")

	# 			marker_transforms[aruco_id] = {
	# 				'x': translation.x,
	# 				'y': translation.y,
	# 				'z': translation.z,
	# 				'qx': rotation.x,
	# 				'qy': rotation.y,
	# 				'qz': rotation.z,
	# 				'qw': rotation.w
	# 			}

	# 	except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException) as e:
	# 		rospy.logwarn(f"Error retrieving transforms: {e}")

	# 	return marker_transforms



def main(args):
	# Initialise ROS
	rospy.init_node('guidance')
	surveyAltitude = rospy.get_param("~surveyAlt", 2)
	# List of waypoints
	wps = [[ 0.0, 0.0, surveyAltitude, 0.0],
		   [ 3.5, 2.0, surveyAltitude, 0.0],
		   [ 3.5, -2.0, surveyAltitude, 0.0],
		   [ 2.5, -2.0, surveyAltitude, 0.0],
		   [ 2.5, 2.0, surveyAltitude, 0.0],
		   [ 1.5, 2.0, surveyAltitude, 0.0],
		   [ 1.5, -2.0, surveyAltitude, 0.0],
		   [ 0.5, -2.0, surveyAltitude, 0.0],
		   [ 0.5, 2.0, surveyAltitude, 0.0],
		   [ -0.5, 2.0, surveyAltitude, 0.0],
		   [ -0.5, -2.0, surveyAltitude, 0.0],
		#    [-1.5, -2.0, surveyAltitude, 0.0],
		#    [-1.5, 2.0, surveyAltitude, 0.0],
		#    [-2.5, 2.0, surveyAltitude, 0.0],
		#    [-2.5, -2.0, surveyAltitude, 0.0],
		#    [-3.5, -2.0, surveyAltitude, 0.0],
		#    [-3.5, 2.0, surveyAltitude, 0.0],
		#    [0.0, 0.0, surveyAltitude, 0.0],
		#    [0.0, 0.0, surveyAltitude, 0.0],
		   ]

	# Create our guidance class option
	guide = Guidance(wps)

	# Spin!
	rospy.spin()


if __name__ == '__main__':
	try:
		main(sys.argv)
	except rospy.ROSInterruptException:
		pass

	print('Node Closed')
