#!/usr/bin/env python

import math

import rospy
import tf2_ros
from std_msgs.msg import Time
from geometry_msgs.msg import TransformStamped

# Library to send PostStamped to ROI
from geometry_msgs.msg import PoseStamped

tfBuffer = None
tfln = None
pub_roi = None

def callback_target_found(msg_in):
    target_time = msg_in.data
    current_time = rospy.Time.now()
    time_since_detection = current_time - target_time
    adjusted_time = current_time - time_since_detection

    rospy.loginfo(f"Received target_found message with timestamp: {target_time.to_sec()}")
    rospy.loginfo(f"Adjusted time for lookup: {adjusted_time.to_sec()}")
    
    try:
        t = tfBuffer.lookup_transform("map", "target", adjusted_time, rospy.Duration(0.1))

        rospy.loginfo("Found target at the following location in the world:")
        rospy.loginfo("[x: %0.2f; y: %0.2f; z: %0.2f]" % (t.transform.translation.x,
                                                          t.transform.translation.y,
                                                          t.transform.translation.z))
        rospy.loginfo("Sending ROI to target found coordinates...")
        pose = PoseStamped()
        pose.header.stamp = adjusted_time
        pose.header.frame_id = "map"
        pose.pose.position.x = t.transform.translation.x
        pose.pose.position.y = t.transform.translation.y
        pose.pose.position.z = t.transform.translation.z
        
        pose.pose.orientation.w = 1.0
        pose.pose.orientation.x = 0.0
        pose.pose.orientation.y = 0.0
        pose.pose.orientation.z = 0.0
        
        pub_roi.publish(pose)
        rospy.loginfo(f"ROI coordinates sent for adjusted time: {adjusted_time.to_sec()}")
        
    except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException) as e:
        rospy.logwarn(f"Failed to lookup transform: {e}")
        rospy.logwarn(f"Adjusted time: {adjusted_time.to_sec()}, Current time: {current_time.to_sec()}")

if __name__ == '__main__':
	rospy.init_node('tf2_listener')

	# Setup timestamp subscriber for "target found" at a specific timestamp
	sub_found = rospy.Subscriber('/emulated_uav/target_found', Time, callback_target_found)

	# Create a listener
	# This catches all messages sent using TF2
	tfBuffer = tf2_ros.Buffer()
	tfln = tf2_ros.TransformListener(tfBuffer)
	
    # Publisher for ROI
	pub_roi = rospy.Publisher('/target_detection/roi', PoseStamped, queue_size=2)

	rospy.loginfo("tf2_listener running.")

	try:
		rospy.spin()
	except rospy.exceptions.ROSInterruptException:
		sub_found.unregister()
	finally:
		rospy.loginfo("tf2_listener shutting down")